# The yml build definition is the "roadmap" for a build, that tells DrupalCI what steps to execute, in what order, and
# Provides a way to "lock" configuration values.
# The structure of a build.yml has the following conventions:
# There are five levels:
# 1. The build
# 2. build stages and build level configuration.
# 3. jobs and build stage configuration
# 4. build tasks and job configuration
# 5. Build task Configuration.


# The keys at each level are one of two possibilities: either the plugin name for a buildstage/job/buildtask,
# *or* they are a configuration override that will take precedence over all other configuration directives.
# The default build. yml file may contain keys who's default configuration is a no-op.
# this is to allow for those configurations to be overridden, such as composer, and patches.

# The build level really only exists to provide for a possibility to run entire, multiple builds. It might go away.
build: #plugin
  environment: #plugin
    startcontainers: #plugin
      runcontainers:
        phpversion: 7
    create_db: #plugin
      dbcreate: #plugin
        #randomstring: 20 #Key Value config
    db_type: sqlite #key Value config
    dbversion: sqlite #key Value config
  codebase: #plugin
    assemble_codebase: #plugin
      checkout:
        repositories:
        - branch: 8.3.x
          repo: git://drupalcode.org/project/drupal.git
          protocol: git
          depth: 1
          checkoutdir: .
          sourcedir: ./
      composer: #plugin
#        arbitrary_configuration: #key Array
#          - item 1
#          - item 2
#          - item 3
      # The default configuration for the patch plugin is to do nothing. But if we do not define it, it wont run at all
      # This allows us to optionally enable it with env variables, user config overrides, or command line overrides.
      # This is an example of a plugin that is configured multiple times.
      patch:
#        patches:
#          - from: http://drupal.org/files/123457.patch
#            to: .
#          - from: http://drupal.org/files/123457.patch
#            to: .
      fetch:
    filesystem:
      prepare_filesystem:
    validate_codebase:
      phplint:
      #this is an example of doing the whole assessment stage twice
  assessment.concurrency:
    testing:
      simpletest.js:
        concurrency: 1
        types: 'PHPUnit-FunctionalJavascript'
      simpletest.normal:
        concurrency: 1
        testgroups: Url
    metrics:
#  assessment.standard:
#    testing:
#      simpletest:
#    metrics:
  buildid: foobar

# a plugin name should never be followed by array, always keys.
# a disambiguator should pass its children as configuration to its parent plugin



